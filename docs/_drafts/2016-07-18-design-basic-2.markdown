---
layout: post
title:  "Базовые дизайн-принципы. Часть 2"
permalink: design-basic-2
date:   2017-06-19 19:11:12 +0400
categories: basic
---

Правила хорошего тона программы.
Вторая часть.


## 3. Нелинейность
Взаимодействие должно оставаться нелинейными.

Пример линейных случаев:
- всплывающие модальные окна, такие как уведомление, вопрос, ввод текста и другие.

Решение:
- продумывать нелинейную работу программы;
- продумывать работу без необходимых данных;
- показывать результат как можно раньше на основе популярных данных.



## 4. Понимание
Делай не то, что просит человек, а то, что ему нужно.

Пример:
- не делать последовательность тяжелых операций, если по последнему действию понятно, что они не нужны.

Решение:
- делать последнее действие.

## 5. Устойчивость
Предлагать альтернативные решения, если необходимое не может быть исполнено.
- если поиск не дал результатов, предлагать альтернативные варианты.

Решение:
- предлагать похожие варианты. То, что может понравиться


## 6. Наставничество
Обучать человека для будущих более быстрых действий


+++++


## 7. Используемость
Использование доступных ресурсов.
- если доступен retina дисплей, то показывать мелко прорисованные иконки.


## 10. Проактивность
После завершения работы делать логичное продолжение.

## 11. Безопасность
Действия компьютера безопасны, человек не должен беспокоиться о безопасности.

## 12. Контекстозависимость и релевантность

память
вспомнить (узнать)
концетрация

постепенное обучение

термины из задачи
учимся быстрей риск низок
нужно подождать
задержки внутри единиц задач
обработка данныз пользователя согласно приоритету а не времени ввода
главное время качество вторично (увеличение изображения)
предугадать действия пользователей


===

[следствие из 2]
## ! 3. Позитивность
Обратная реакция должна быть позитивной, независимо от ответа сервера.

Следствие из 2. Обратная реакция интерфейса должна быть позитивной, как будто оно уже успешно сделано:
- при взаимодействии клиент-сервер не ждать ответа сервера;
- при лайке счетчик должен сразу увеличиваться;
- при удалении программы сразу показывать, что программы нет, и удалять её в фоне;
- при копировании папки (даже с большим объемом) показывать её уже скопированной.

Решение:
- позитивная реакция на взаимодействие;
- делать в фоне;
- делать потом.


## ! 4. Уверенность
Подтверждений быть не должно.
(2). Сразу делать целевое действие без запроса у человека.

Подтверждений быть не должно. Нужно делать сразу с возможностью быстрой отмены. Исключения: критические операции, например, форматирование диска. Но даже в этих случаях должна быть возможность отмены и безвозвратное действие должно быть отложено в конец операции и хорошо проиллюстрировано:
- удаление файла, фото, элемента.

Решение:
- делать сразу с возможностью отмены.


! (2). Сразу делать целевое действие без запроса у человека:
- при открытии в интернете PDF-документа сразу показывать его, а не спрашивать о сохранении;
- при скачке файла сразу скачивать его во временную директорию, а не спрашивать место для сохранения.


## ! 5. Эффективность
Делать разумные оптимизации для ускорения работы и оптимизации ресурсов.

Делать разумные оптимизации для ускорения работы.
- мгновенное создание дубликата тяжелой папки с файлами.

Решение:
- откладывать создание реальной копии папки до тех пор, пока она реальна не пригодится (будет изменена).



Try Direct Manipulation instead of contextless menus.
Try Gradual Engagement instead of a hasty sign up.
Try Designing For Zero Data instead of just data heavy cases.
Try Inline Validation instead of delaying errors.
Try Recognition instead of recall.
Try Keyboard Shortcuts instead of buttons only.
Try Softer Prompts instead of modal windows.
Try Icon Labels instead of opening for interpretation.
Try Useful Calculations instead of asking to do math.
Try Providing Feedback instead of silence.
Try Extra Padding instead of overcrowding elements.
Try Less Choice instead of giving too many options.
